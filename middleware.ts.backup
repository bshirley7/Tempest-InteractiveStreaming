import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';
import { NextRequest, NextResponse } from 'next/server';
import { updateSession } from '@/lib/supabase/middleware';

// Only enable middleware if Clerk is configured
const publishableKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY;
const secretKey = process.env.CLERK_SECRET_KEY;

const isProtectedRoute = createRouteMatcher([
  '/library(.*)',
  '/analytics(.*)',
  '/settings(.*)',
]);

// Define middleware function based on Clerk configuration
const middleware = (publishableKey && secretKey)
  ? clerkMiddleware(async (auth, req) => {
      // Handle Supabase session refresh first
      const supabaseResponse = await updateSession(req);
      
      if (isProtectedRoute(req)) {
        await auth.protect();
      }
      
      // Return the Supabase response which includes session updates
      return supabaseResponse;
    })
  : async function middleware(req: NextRequest) {
      // Even without Clerk, we still want Supabase session refresh
      return await updateSession(req);
    };

export default middleware;

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
};